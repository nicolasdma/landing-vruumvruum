// suggestions.ts

export const suggestions = [
  {
    title: "🚀 Global states & Enhancing User Experience",
    description: [
      "Adding a global state management system to store all requests per session. This way, we avoid going back to the backend every time a page is loaded. When a page is opened for the first time, the data is fetched and stored in memory. As long as the session lasts, the data stays available, enabling smooth navigation without repeated backend calls.",
      "For updates (like opening a chest or fuse guardians), the frontend should optimistically update the UI, send the change to the backend, and only revert the data if the response returns an error. The UI shouldn’t block or wait for the backend before reflecting changes.",
      "This would drastically improve the user experience by reducing perceived waiting times.",
      "I usually use Redux for this kind of pattern, but Zustand could be a great fit here — it's much lighter and easier to implement. If you’re open to including this in the second phase, I’ll explore using Zustand.",
    ],
    timeEstimate: [
      { task: "Setup Zustand (store, types, helpers)", time: "2 hours" },
      {
        task: "Refactor data fetching to use Zustand (8 pages)",
        time: "8–10 hours",
      },
      {
        task: "Add optimistic update patterns for key mutations",
        time: "4–5 hours",
      },
      { task: "Testing, fallback logic for errors", time: "3–4 hours" },
      { task: "Add dev tools and persistence middleware", time: "1 hour" },
    ],
    total: "18–22 hours",
    cost: "$88",
    rate: "$4/hr",
    workingDays: "3–4 working days",
  },
  {
    title: "🛠 Code Refactoring for Better Maintainability",
    description: [
      "The code is currently functional, but it quite messy. We have files with more than 2,000 lines, a lot of repeated code and logic, functions that are declared but not used anywhere. While this doesn’t affect performance or visuals right now, it could make future development and maintenance difficult as the project grows.",
      "I suggest considering a refactoring in the near future to improve the organization of the codebase. A clean and well-structured codebase will help ensure that any developer can easily understand and maintain the project.",
      "This won't impact the functionality or performance, but it will make future work more manageable and less error-prone. We can start by addressing the most complex or messy files and gradually clean up the rest.",
    ],
    timeEstimate: [
      {
        task: "Identify areas with redundant code and complex logic",
        time: "3–4 hours",
      },
      {
        task: "Refactor main files (structure, naming conventions, etc.)",
        time: "5–6 hours",
      },
      { task: "Remove unused functions and dead code", time: "2–3 hours" },
      {
        task: "Simplify complex logic and improve readability",
        time: "4–5 hours",
      },
    ],
    total: "14–18 hours",
    cost: "$72",
    rate: "$4/hr",
    workingDays: "3 working days",
  },
  {
    title: "🌐 Create Public User Pages (Non-authenticated)",
    description: [
      "Currently, the application only offers authenticated user features. To make the platform more accessible to new visitors or users without accounts, I suggest adding public pages such as 'About', 'Contact', or 'FAQ'. These pages will provide general information about the platform without requiring authentication.",
      "The design and content for these pages should be provided in advance. With this in place, the implementation of routing and page structure will be straightforward.",
      "These public pages will enhance the user experience by providing easy access to essential information and improve user engagement.",
    ],
    timeEstimate: [
      {
        task: "Implement routing and navigation for public tabs",
        time: "2 hours",
      },
      {
        task: "Integrate provided design and content for each public page",
        time: "8 hours",
      },
      { task: "Test the navigation and responsiveness", time: "1 hour" },
    ],
    total: "11 hours",
    cost: "$44",
    rate: "$4/hr",
    workingDays: "2 working days",
  },
  // {
  //   title: "🧠 Full Code Review for Performance Optimization",
  //   description: [
  //     "I suggest conducting a comprehensive code review focused on performance improvements across the project. The goal is to identify and optimize costly rendering patterns, redundant effects, and excessive animation instances that could degrade performance — especially on mobile or lower-end devices.",
  //     "For example, in the Guardian card UI, your current setup creates a separate animation instance for each element, meaning that:",
  //     "",
  //     "Each of the 6 guardian cards has its own repeated animation for:",
  //     "- The glowing background",
  //     "- The color glow",
  //     "- 15 magical particles per guardian",
  //     "- The character image bounce",
  //     "",
  //     "That's ~96 separate animation loops (6 cards × [2 glow layers + 15 particles + image]).",
  //     "",
  //     "✅ This can be optimized by using a single animation on the grid container since all cards animate at the same rate and rhythm.",
  //     "",
  //     "🔧 Performance Impact:",
  //     "On modern devices, this might not cause noticeable issues. But on lower-end or mobile devices, these many animations — especially with lots of blur, box-shadow, and constantly changing transforms — can be resource-intensive.",
  //     "",
  //     "Since most of these effects animate in sync (same duration and easing), they can be consolidated or optimized to reduce load without sacrificing visual quality.",
  //     "",
  //     "This review would cover UI components, animations, rendering patterns, and anything affecting frame rate, memory use, or responsiveness.",
  //   ],
  //   timeEstimate: [
  //     { task: "Audit component tree, animation patterns, and rendering logic", time: "3–4 hours" },
  //     { task: "Refactor or consolidate animation instances where possible", time: "4–6 hours" },
  //     { task: "Optimize particle effects and resource-heavy visuals", time: "3–4 hours" },
  //     { task: "Test across devices and measure FPS improvements", time: "2–3 hours" },
  //   ],
  //   total: "12–17 hours",
  //   cost: "$48–$68",
  //   rate: "$4/hr",
  //   workingDays: "2–3 working days"
  // },
  // {
  //   title: "🧠 Full Code Review, Performance Optimization & Refactoring for Maintainability",
  //   description: [
  //     "This proposal combines two essential initiatives to improve both the performance and maintainability of the codebase.",
  //     "",
  //     "🔍 **Part 1: Performance Optimization**",
  //     "I recommend conducting a comprehensive code review focused on identifying and optimizing expensive rendering patterns, redundant effects, and excessive animations — especially on mobile and low-end devices.",
  //     "",
  //     "For instance, in the Guardian card UI, each card currently creates its own set of animation instances:",
  //     "- 1 glowing background",
  //     "- 1 color glow",
  //     "- 15 magical particles",
  //     "- 1 character image bounce",
  //     "",
  //     "That’s ~96 animation loops for just 6 cards. These could be consolidated by applying a shared animation at the grid level, as all cards animate in sync.",
  //     "",
  //     "💡 Optimizing this will reduce CPU/GPU load, improve frame rates, and ensure smoother performance across devices without sacrificing visuals.",
  //     "",
  //     "⚙️ This review will also cover rendering logic, component structure, animation patterns, and frame/memory usage.",
  //     "",
  //     "🔧 **Part 2: Code Refactoring for Maintainability**",
  //     "The project currently has large files (2,000+ lines), duplicated logic, and unused functions. While everything works now, this complexity can hinder scalability and future development.",
  //     "",
  //     "A gradual refactor will improve structure, remove dead code, and enhance readability, making the codebase easier to maintain and collaborate on.",
  //     "This won't alter functionality but will reduce technical debt and simplify future updates.",
  //   ],
  //   timeEstimate: [
  //     { task: "Audit components, animation patterns, and rendering logic", time: "3–4 hours" },
  //     { task: "Refactor or consolidate animation instances", time: "4–6 hours" },
  //     { task: "Optimize particle effects and heavy visuals", time: "3–4 hours" },
  //     { task: "Test performance improvements across devices", time: "2–3 hours" },
  //     { task: "Identify areas with redundant code/complex logic", time: "3–4 hours" },
  //     { task: "Refactor main files and apply naming conventions", time: "5–6 hours" },
  //     { task: "Remove unused functions and dead code", time: "2–3 hours" },
  //     { task: "Simplify logic and improve readability", time: "4–5 hours" },
  //   ],
  //   total: "26–35 hours",
  //   cost: "$104–$140",
  //   rate: "$4/hr",
  //   workingDays: "4–5 working days"
  // }
];
